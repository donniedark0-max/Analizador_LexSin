/* The following code was generated by JFlex 1.4.3 on 17/11/23 15:07 */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/11/23 15:07 from the specification file
 * <tt>src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0, 16, 16, 57,  0, 16, 58,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    16,  0,  0,  0,  0,  0,  0,  4, 42, 43,  0,  0, 46, 59, 15,  0, 
     6, 11, 13, 13, 13, 13, 13, 13,  2,  2,  0, 56,  0,  0,  0,  0, 
     0, 27, 10, 33, 26, 32, 18, 40, 31, 36, 29,  1, 22, 24, 37, 19, 
    23, 41, 20, 34, 28, 30, 35, 39,  8, 25, 38, 44,  0, 45,  0, 21, 
     0, 49,  9, 52, 14, 51,  5, 47,  3, 54,  1,  1, 48, 17, 55, 12, 
     1,  1,  1, 50, 53,  1, 17,  1,  7,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\1\1\3\5\2"+
    "\1\1\2\4\17\2\1\5\1\6\1\7\1\10\1\11"+
    "\2\2\1\12\1\13\1\14\4\0\1\14\3\2\1\0"+
    "\1\2\2\0\1\15\1\2\1\16\16\2\1\17\2\2"+
    "\1\20\1\21\1\2\1\22\1\23\12\2\1\0\2\2"+
    "\1\12\1\0\1\15\1\24\1\25\2\2\1\0\1\26"+
    "\1\27\1\0\1\2\1\30\1\31\1\32\2\2\1\33"+
    "\1\34\1\2\1\35\1\2\1\36\1\37\1\40\1\41"+
    "\1\42\1\2\1\43\1\2\1\44\1\2\1\45\1\46"+
    "\1\47\1\2\1\50\1\51\1\52\1\2\1\53\1\54"+
    "\1\2\1\55\1\56\1\57\1\60\1\61\1\62\1\0"+
    "\2\2\1\63\1\64\1\65\1\2\1\66\1\67\1\2"+
    "\1\70\1\71\2\2\1\72\2\2\1\73\2\2\1\3"+
    "\4\2\1\74\1\75\1\76\1\77\2\2\1\100\1\101"+
    "\1\2\1\102\7\2\1\103\3\2\1\104\2\2\1\105"+
    "\3\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708\0\74"+
    "\0\74\0\74\0\u030c\0\u0744\0\u0780\0\u07bc\0\74\0\74"+
    "\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c"+
    "\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u02d0\0\u0ac8\0\170\0\u0b04"+
    "\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\170\0\u0e4c\0\u0e88"+
    "\0\u0ec4\0\170\0\u0f00\0\170\0\170\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\74\0\74\0\170\0\u12c0"+
    "\0\u12fc\0\u1338\0\170\0\170\0\u1374\0\u13b0\0\170\0\170"+
    "\0\u13ec\0\u1428\0\u1464\0\170\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\170\0\170\0\170\0\170\0\170\0\u1590\0\170\0\u15cc"+
    "\0\170\0\u1608\0\170\0\170\0\170\0\u1644\0\170\0\170"+
    "\0\u1680\0\u16bc\0\170\0\170\0\u16f8\0\170\0\170\0\170"+
    "\0\170\0\170\0\170\0\u1734\0\u1770\0\u17ac\0\170\0\170"+
    "\0\74\0\u17e8\0\170\0\u1824\0\u1860\0\170\0\u189c\0\u18d8"+
    "\0\u1914\0\170\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\74"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\170\0\170\0\170\0\170"+
    "\0\u1b6c\0\u1ba8\0\170\0\170\0\u1be4\0\170\0\u1c20\0\u1c5c"+
    "\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\170\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\170\0\u1e78\0\u1eb4\0\170\0\u1ef0\0\u1f2c\0\u1f68";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\3"+
    "\1\10\1\11\1\12\1\4\1\13\1\4\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\3\1\23\1\24"+
    "\1\25\1\3\1\26\1\27\1\30\1\31\1\3\1\32"+
    "\1\3\1\33\1\34\1\3\1\35\1\36\4\3\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\2\3\1\45\5\3"+
    "\1\46\1\47\1\16\1\2\75\0\3\3\1\0\13\3"+
    "\1\0\31\3\5\0\11\3\6\0\1\4\1\50\1\0"+
    "\1\51\1\4\2\50\2\51\1\4\1\0\1\4\1\51"+
    "\3\0\1\51\7\0\2\51\3\0\1\50\2\51\17\0"+
    "\1\51\1\0\2\51\10\0\3\3\1\52\13\3\1\0"+
    "\31\3\5\0\11\3\6\0\1\53\3\0\1\54\4\0"+
    "\1\54\1\0\1\54\60\0\1\4\1\50\1\0\1\51"+
    "\1\4\1\55\1\50\2\51\1\4\1\0\1\4\1\51"+
    "\3\0\1\51\7\0\2\51\3\0\1\50\2\51\17\0"+
    "\1\51\1\0\2\51\10\0\3\3\1\0\13\3\1\0"+
    "\2\3\1\56\2\3\1\57\12\3\1\60\10\3\5\0"+
    "\11\3\5\0\3\3\1\61\13\3\1\0\31\3\5\0"+
    "\11\3\5\0\3\3\1\61\13\3\1\0\21\3\1\62"+
    "\7\3\5\0\11\3\5\0\3\3\1\63\13\3\1\0"+
    "\31\3\5\0\11\3\5\0\3\3\1\64\13\3\1\0"+
    "\31\3\5\0\11\3\6\0\1\65\3\0\1\65\4\0"+
    "\1\65\1\0\1\65\76\0\2\16\34\0\1\16\13\0"+
    "\1\16\2\0\3\3\1\0\13\3\1\16\1\17\30\3"+
    "\4\0\1\16\11\3\2\0\1\16\2\0\3\3\1\0"+
    "\13\3\1\0\2\3\1\66\26\3\5\0\11\3\5\0"+
    "\3\3\1\63\13\3\1\0\3\3\1\67\25\3\5\0"+
    "\11\3\5\0\3\3\1\0\13\3\1\0\2\3\1\70"+
    "\14\3\1\71\11\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\2\3\1\72\14\3\1\73\11\3\5\0"+
    "\11\3\5\0\3\3\1\0\13\3\1\0\2\3\1\74"+
    "\12\3\1\75\13\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\2\3\1\76\5\3\1\77\4\3\1\100"+
    "\13\3\5\0\11\3\5\0\3\3\1\64\13\3\1\0"+
    "\17\3\1\101\3\3\1\102\5\3\5\0\11\3\5\0"+
    "\3\3\1\0\13\3\1\0\11\3\1\103\12\3\1\104"+
    "\4\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\17\3\1\105\11\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\5\3\1\106\1\3\1\107\5\3\1\110"+
    "\1\3\1\111\1\112\3\3\1\113\1\114\1\3\1\115"+
    "\1\3\5\0\11\3\5\0\3\3\1\52\13\3\1\0"+
    "\5\3\1\116\23\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\5\3\1\117\1\3\1\120\2\3\1\121"+
    "\16\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\12\3\1\122\1\123\1\3\1\124\1\125\12\3\5\0"+
    "\11\3\5\0\3\3\1\0\13\3\1\0\24\3\1\126"+
    "\4\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\2\3\1\127\26\3\5\0\11\3\77\0\1\130\1\0"+
    "\3\3\1\0\13\3\1\0\31\3\5\0\1\3\1\131"+
    "\7\3\5\0\3\3\1\0\13\3\1\0\31\3\5\0"+
    "\4\3\1\132\4\3\4\0\71\46\1\133\2\46\2\0"+
    "\1\51\1\50\1\0\2\51\2\50\3\51\1\0\2\51"+
    "\3\0\1\51\7\0\2\51\3\0\1\50\2\51\17\0"+
    "\1\51\1\0\2\51\11\0\1\134\2\0\2\134\2\0"+
    "\3\134\1\0\2\134\3\0\1\134\7\0\2\134\4\0"+
    "\2\134\17\0\1\134\1\0\2\134\11\0\1\53\1\0"+
    "\1\135\1\0\1\53\4\0\1\53\1\0\1\53\60\0"+
    "\1\53\1\0\1\136\1\0\1\54\4\0\1\54\1\0"+
    "\1\54\60\0\1\55\2\0\2\55\2\0\3\55\1\0"+
    "\2\55\3\0\1\55\7\0\2\55\4\0\2\55\17\0"+
    "\1\55\1\0\2\55\10\0\3\3\1\0\13\3\1\0"+
    "\3\3\1\137\25\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\12\3\1\140\16\3\5\0\11\3\5\0"+
    "\3\3\1\0\13\3\1\0\16\3\1\141\12\3\5\0"+
    "\11\3\12\0\1\142\4\0\1\142\61\0\3\3\1\0"+
    "\13\3\1\0\1\3\1\143\1\3\1\144\25\3\5\0"+
    "\11\3\12\0\1\145\4\0\1\145\1\0\1\145\60\0"+
    "\1\53\3\0\1\53\4\0\1\53\1\0\1\53\57\0"+
    "\3\3\1\0\13\3\1\0\3\3\1\146\25\3\5\0"+
    "\11\3\5\0\3\3\1\0\13\3\1\0\3\3\1\147"+
    "\1\3\1\150\23\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\13\3\1\151\15\3\5\0\11\3\5\0"+
    "\3\3\1\0\13\3\1\0\2\3\1\152\6\3\1\153"+
    "\17\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\12\3\1\154\16\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\6\3\1\155\22\3\5\0\11\3\5\0"+
    "\3\3\1\0\13\3\1\0\21\3\1\156\7\3\5\0"+
    "\11\3\5\0\3\3\1\0\13\3\1\0\22\3\1\157"+
    "\6\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\4\3\1\160\24\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\5\3\1\161\23\3\5\0\11\3\5\0"+
    "\3\3\1\0\13\3\1\0\20\3\1\162\10\3\5\0"+
    "\11\3\5\0\3\3\1\0\13\3\1\0\22\3\1\163"+
    "\6\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\11\3\1\164\17\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\11\3\1\165\17\3\5\0\11\3\5\0"+
    "\3\3\1\0\13\3\1\0\21\3\1\166\7\3\5\0"+
    "\11\3\5\0\3\3\1\0\13\3\1\0\6\3\1\167"+
    "\22\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\7\3\1\170\21\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\30\3\1\171\5\0\11\3\5\0\3\3"+
    "\1\0\13\3\1\0\5\3\1\172\11\3\1\173\1\174"+
    "\4\3\1\175\1\3\1\176\1\3\5\0\11\3\5\0"+
    "\3\3\1\0\13\3\1\0\13\3\1\177\15\3\5\0"+
    "\11\3\5\0\3\3\1\0\13\3\1\0\23\3\1\200"+
    "\5\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\6\3\1\201\22\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\5\3\1\202\23\3\5\0\11\3\5\0"+
    "\3\3\1\0\13\3\1\0\3\3\1\203\1\3\1\204"+
    "\23\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\2\3\1\205\20\3\1\206\5\3\5\0\11\3\5\0"+
    "\3\3\1\0\5\3\1\207\5\3\1\0\31\3\5\0"+
    "\11\3\5\0\3\3\1\0\13\3\1\0\3\3\1\210"+
    "\1\3\1\204\23\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\20\3\1\211\10\3\5\0\11\3\5\0"+
    "\3\3\1\0\13\3\1\0\6\3\1\212\4\3\1\213"+
    "\15\3\5\0\11\3\6\0\1\214\3\0\1\214\4\0"+
    "\1\214\1\0\1\214\57\0\3\3\1\0\7\3\1\215"+
    "\3\3\1\0\31\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\31\3\5\0\5\3\1\216\3\3\75\0"+
    "\2\133\3\0\1\134\1\0\1\50\2\134\2\0\3\134"+
    "\1\0\2\134\3\0\1\134\7\0\2\134\4\0\2\134"+
    "\17\0\1\134\1\0\2\134\10\0\3\3\1\0\13\3"+
    "\1\0\13\3\1\217\15\3\5\0\11\3\5\0\3\3"+
    "\1\0\13\3\1\0\27\3\1\220\1\3\5\0\11\3"+
    "\10\0\1\221\1\0\1\142\4\0\1\142\64\0\1\136"+
    "\1\0\1\145\4\0\1\145\1\0\1\145\57\0\3\3"+
    "\1\0\13\3\1\0\4\3\1\222\24\3\5\0\11\3"+
    "\5\0\3\3\1\0\13\3\1\0\1\3\1\223\27\3"+
    "\5\0\11\3\5\0\3\3\1\0\13\3\1\0\6\3"+
    "\1\224\22\3\5\0\11\3\5\0\3\3\1\0\13\3"+
    "\1\0\21\3\1\225\7\3\5\0\11\3\5\0\3\3"+
    "\1\0\13\3\1\0\1\3\1\226\27\3\5\0\11\3"+
    "\5\0\3\3\1\0\13\3\1\0\16\3\1\227\12\3"+
    "\5\0\11\3\5\0\3\3\1\0\13\3\1\0\21\3"+
    "\1\230\7\3\5\0\11\3\5\0\3\3\1\0\13\3"+
    "\1\0\11\3\1\231\17\3\5\0\11\3\5\0\3\3"+
    "\1\0\13\3\1\0\13\3\1\232\15\3\5\0\11\3"+
    "\5\0\3\3\1\0\13\3\1\0\6\3\1\233\22\3"+
    "\5\0\11\3\5\0\3\3\1\0\13\3\1\0\17\3"+
    "\1\115\11\3\5\0\11\3\5\0\3\3\1\0\13\3"+
    "\1\0\17\3\1\106\11\3\5\0\11\3\5\0\3\3"+
    "\1\0\13\3\1\0\21\3\1\234\7\3\5\0\11\3"+
    "\5\0\3\3\1\0\13\3\1\0\5\3\1\235\12\3"+
    "\1\236\10\3\5\0\11\3\5\0\3\3\1\0\13\3"+
    "\1\0\21\3\1\237\7\3\5\0\11\3\6\0\1\214"+
    "\3\0\1\214\4\0\1\214\1\0\1\214\35\0\1\240"+
    "\21\0\3\3\1\0\4\3\1\241\6\3\1\0\31\3"+
    "\5\0\11\3\5\0\3\3\1\0\13\3\1\0\31\3"+
    "\5\0\6\3\1\242\2\3\5\0\3\3\1\0\13\3"+
    "\1\0\5\3\1\243\23\3\5\0\11\3\5\0\3\3"+
    "\1\0\13\3\1\0\4\3\1\244\24\3\5\0\11\3"+
    "\5\0\3\3\1\0\5\3\1\245\5\3\1\0\31\3"+
    "\5\0\11\3\5\0\3\3\1\0\13\3\1\0\1\3"+
    "\1\246\27\3\5\0\11\3\5\0\3\3\1\0\5\3"+
    "\1\247\5\3\1\0\26\3\1\250\2\3\5\0\11\3"+
    "\5\0\3\3\1\0\13\3\1\0\12\3\1\251\16\3"+
    "\5\0\11\3\5\0\3\3\1\0\13\3\1\0\4\3"+
    "\1\252\24\3\5\0\11\3\5\0\3\3\1\0\5\3"+
    "\1\253\5\3\1\0\31\3\5\0\11\3\5\0\3\3"+
    "\1\0\13\3\1\0\1\3\1\254\27\3\5\0\11\3"+
    "\5\0\3\3\1\0\13\3\1\0\4\3\1\255\24\3"+
    "\5\0\11\3\5\0\3\3\1\0\5\3\1\256\5\3"+
    "\1\0\31\3\5\0\11\3\5\0\3\3\1\0\13\3"+
    "\1\0\31\3\5\0\2\3\1\257\6\3\5\0\3\3"+
    "\1\0\13\3\1\0\31\3\5\0\7\3\1\260\1\3"+
    "\5\0\3\3\1\0\13\3\1\0\2\3\1\261\26\3"+
    "\5\0\11\3\5\0\3\3\1\0\13\3\1\0\21\3"+
    "\1\262\7\3\5\0\11\3\5\0\3\3\1\0\13\3"+
    "\1\0\13\3\1\263\15\3\5\0\11\3\5\0\3\3"+
    "\1\0\13\3\1\0\16\3\1\264\12\3\5\0\11\3"+
    "\5\0\3\3\1\0\13\3\1\0\21\3\1\265\7\3"+
    "\5\0\11\3\5\0\3\3\1\0\13\3\1\0\31\3"+
    "\5\0\1\3\1\266\7\3\5\0\3\3\1\0\7\3"+
    "\1\267\3\3\1\0\31\3\5\0\11\3\5\0\3\3"+
    "\1\0\13\3\1\0\2\3\1\270\26\3\5\0\11\3"+
    "\5\0\3\3\1\0\13\3\1\0\13\3\1\271\15\3"+
    "\5\0\11\3\5\0\3\3\1\0\13\3\1\0\12\3"+
    "\1\272\16\3\5\0\11\3\5\0\3\3\1\0\13\3"+
    "\1\0\17\3\1\273\11\3\5\0\11\3\5\0\3\3"+
    "\1\0\13\3\1\0\15\3\1\274\13\3\5\0\11\3"+
    "\5\0\3\3\1\0\13\3\1\0\31\3\5\0\10\3"+
    "\1\275\5\0\3\3\1\0\13\3\1\0\6\3\1\272"+
    "\22\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\12\3\1\276\16\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\3\3\1\277\25\3\5\0\11\3\5\0"+
    "\3\3\1\0\13\3\1\0\7\3\1\272\21\3\5\0"+
    "\11\3\5\0\3\3\1\0\13\3\1\0\3\3\1\300"+
    "\25\3\5\0\11\3\5\0\3\3\1\0\13\3\1\0"+
    "\17\3\1\272\11\3\5\0\11\3\5\0\3\3\1\0"+
    "\13\3\1\0\13\3\1\272\15\3\5\0\11\3\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\3\11\4\1\2\11\4\0\4\1"+
    "\1\0\1\1\2\0\43\1\1\0\3\1\1\0\2\11"+
    "\3\1\1\0\2\1\1\0\46\1\1\0\4\1\1\11"+
    "\16\1\1\11\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    } 
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }   
;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { /* Ignorar los comentarios, incluyendo saltos de línea */
          }
        case 70: break;
        case 57: 
          { return new Symbol(sym.PUSH, yychar, yyline, yytext());
          }
        case 71: break;
        case 7: 
          { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
          }
        case 72: break;
        case 34: 
          { return new Symbol(sym.AND, yychar, yyline, yytext());
          }
        case 73: break;
        case 35: 
          { return new Symbol(sym.JMP, yychar, yyline, yytext());
          }
        case 74: break;
        case 32: 
          { return new Symbol(sym.DIV, yychar, yyline, yytext());
          }
        case 75: break;
        case 20: 
          { return new Symbol(sym.NumeroOctal, yychar, yyline, yytext());
          }
        case 76: break;
        case 48: 
          { return new Symbol(sym.INC, yychar, yyline, yytext());
          }
        case 77: break;
        case 29: 
          { return new Symbol(sym.MOV, yychar, yyline, yytext());
          }
        case 78: break;
        case 69: 
          { return new Symbol(sym.Section, yychar, yyline, yytext());
          }
        case 79: break;
        case 13: 
          { return new Symbol(sym.NumeroDecimal, yychar, yyline, yytext());
          }
        case 80: break;
        case 27: 
          { return new Symbol(sym.LEA, yychar, yyline, yytext());
          }
        case 81: break;
        case 60: 
          { return new Symbol(sym.LODSB, yychar, yyline, yytext());
          }
        case 82: break;
        case 4: 
          { /*Ignorar*/
          }
        case 83: break;
        case 66: 
          { return new Symbol(sym.STOSB, yychar, yyline, yytext());
          }
        case 84: break;
        case 16: 
          { return new Symbol(sym.JE, yychar, yyline, yytext());
          }
        case 85: break;
        case 49: 
          { return new Symbol(sym.NOP, yychar, yyline, yytext());
          }
        case 86: break;
        case 38: 
          { return new Symbol(sym.JNC, yychar, yyline, yytext());
          }
        case 87: break;
        case 53: 
          { return new Symbol(sym.NumeroBinario, yychar, yyline, yytext());
          }
        case 88: break;
        case 45: 
          { return new Symbol(sym.STI, yychar, yyline, yytext());
          }
        case 89: break;
        case 55: 
          { return new Symbol(sym.LOOP, yychar, yyline, yytext());
          }
        case 90: break;
        case 52: 
          { return new Symbol(sym.XCHG, yychar, yyline, yytext());
          }
        case 91: break;
        case 5: 
          { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
          }
        case 92: break;
        case 18: 
          { return new Symbol(sym.JZ, yychar, yyline, yytext());
          }
        case 93: break;
        case 14: 
          { return new Symbol(sym.OR, yychar, yyline, yytext());
          }
        case 94: break;
        case 33: 
          { return new Symbol(sym.ADD, yychar, yyline, yytext());
          }
        case 95: break;
        case 28: 
          { return new Symbol(sym.POP, yychar, yyline, yytext());
          }
        case 96: break;
        case 11: 
          { /* Saltos de línea */
          }
        case 97: break;
        case 21: 
          { return new Symbol(sym.XOR, yychar, yyline, yytext());
          }
        case 98: break;
        case 8: 
          { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
          }
        case 99: break;
        case 46: 
          { return new Symbol(sym.SUB, yychar, yyline, yytext());
          }
        case 100: break;
        case 42: 
          { return new Symbol(sym.CMP, yychar, yyline, yytext());
          }
        case 101: break;
        case 26: 
          { return new Symbol(sym.RET, yychar, yyline, yytext());
          }
        case 102: break;
        case 56: 
          { return new Symbol(sym.POPF, yychar, yyline, yytext());
          }
        case 103: break;
        case 37: 
          { return new Symbol(sym.JNE, yychar, yyline, yytext());
          }
        case 104: break;
        case 19: 
          { return new Symbol(sym.JG, yychar, yyline, yytext());
          }
        case 105: break;
        case 67: 
          { return new Symbol(sym.Global, yychar, yyline, yytext());
          }
        case 106: break;
        case 30: 
          { return new Symbol(sym.MUL, yychar, yyline, yytext());
          }
        case 107: break;
        case 6: 
          { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
          }
        case 108: break;
        case 62: 
          { return new Symbol(sym.MOVSB, yychar, yyline, yytext());
          }
        case 109: break;
        case 39: 
          { return new Symbol(sym.JNZ, yychar, yyline, yytext());
          }
        case 110: break;
        case 12: 
          { return new Symbol(sym.NumeroHexadecimal, yychar, yyline, yytext());
          }
        case 111: break;
        case 54: 
          { return new Symbol(sym.RETF, yychar, yyline, yytext());
          }
        case 112: break;
        case 65: 
          { return new Symbol(sym.CALLF, yychar, yyline, yytext());
          }
        case 113: break;
        case 40: 
          { return new Symbol(sym.HLT, yychar, yyline, yytext());
          }
        case 114: break;
        case 64: 
          { return new Symbol(sym.CMPSB, yychar, yyline, yytext());
          }
        case 115: break;
        case 61: 
          { return new Symbol(sym.PUSHF, yychar, yyline, yytext());
          }
        case 116: break;
        case 43: 
          { return new Symbol(sym.SAR, yychar, yyline, yytext());
          }
        case 117: break;
        case 36: 
          { return new Symbol(sym.JEQ, yychar, yyline, yytext());
          }
        case 118: break;
        case 58: 
          { return new Symbol(sym.TEST, yychar, yyline, yytext());
          }
        case 119: break;
        case 51: 
          { return new Symbol(sym.XLAT, yychar, yyline, yytext());
          }
        case 120: break;
        case 63: 
          { return new Symbol(sym.MOVSW, yychar, yyline, yytext());
          }
        case 121: break;
        case 31: 
          { return new Symbol(sym.DEC, yychar, yyline, yytext());
          }
        case 122: break;
        case 59: 
          { return new Symbol(sym.CALL, yychar, yyline, yytext());
          }
        case 123: break;
        case 44: 
          { return new Symbol(sym.SHL, yychar, yyline, yytext());
          }
        case 124: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 125: break;
        case 25: 
          { return new Symbol(sym.ROL, yychar, yyline, yytext());
          }
        case 126: break;
        case 47: 
          { return new Symbol(sym.SHR, yychar, yyline, yytext());
          }
        case 127: break;
        case 22: 
          { return new Symbol(sym.BSF, yychar, yyline, yytext());
          }
        case 128: break;
        case 17: 
          { return new Symbol(sym.JC, yychar, yyline, yytext());
          }
        case 129: break;
        case 50: 
          { return new Symbol(sym.NOT, yychar, yyline, yytext());
          }
        case 130: break;
        case 41: 
          { return new Symbol(sym.CLI, yychar, yyline, yytext());
          }
        case 131: break;
        case 24: 
          { return new Symbol(sym.ROR, yychar, yyline, yytext());
          }
        case 132: break;
        case 15: 
          { return new Symbol(sym.JL, yychar, yyline, yytext());
          }
        case 133: break;
        case 9: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 134: break;
        case 68: 
          { return new Symbol(sym.Etiquetas, yychar, yyline, yytext());
          }
        case 135: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 136: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 137: break;
        case 23: 
          { return new Symbol(sym.BSR, yychar, yyline, yytext());
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
