/* The following code was generated by JFlex 1.4.3 on 14/11/23, 18:22 */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/11/23, 18:22 from the specification file
 * <tt>src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 16, 56,  0,  0, 16,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    16,  0,  0,  0,  0,  0,  0,  4, 41, 42,  0,  0, 45, 57, 15,  0, 
     6, 11, 13, 13, 13, 13, 13, 13,  2,  2,  0, 55,  0,  0,  0,  0, 
     0, 26, 10, 32, 25, 31, 17, 39, 30, 35, 28,  1, 21, 23, 36, 18, 
    22, 40, 19, 33, 27, 29, 34, 38,  8, 24, 37, 43,  0, 44,  0, 20, 
     0, 48,  9, 51, 14, 50,  5, 46,  3, 53,  1,  1, 47,  1, 54, 12, 
     1,  1,  1, 49, 52,  1,  1,  1,  7,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\2\1\1\1\3\5\2"+
    "\1\1\1\4\17\2\1\5\1\6\1\7\1\10\1\11"+
    "\2\2\1\12\1\13\4\0\1\13\3\2\1\0\1\2"+
    "\2\0\1\14\1\2\1\15\16\2\1\16\2\2\1\17"+
    "\1\20\1\2\1\21\1\22\12\2\1\0\2\2\1\12"+
    "\1\0\1\14\1\23\1\24\2\2\1\0\1\25\1\26"+
    "\1\0\1\2\1\27\1\30\1\31\2\2\1\32\1\33"+
    "\1\2\1\34\1\2\1\35\1\36\1\37\1\40\1\41"+
    "\1\2\1\42\1\2\1\43\1\2\1\44\1\45\1\46"+
    "\1\2\1\47\1\50\1\51\1\2\1\52\1\53\1\2"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\0\2\2"+
    "\1\62\1\63\1\64\1\2\1\65\1\66\1\2\1\67"+
    "\1\70\2\2\1\71\2\2\1\72\2\2\1\3\4\2"+
    "\1\73\1\74\1\75\1\76\2\2\1\77\1\100\1\2"+
    "\1\101\7\2\1\102\3\2\1\103\2\2\1\104\3\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\72\0\72"+
    "\0\72\0\72\0\u06cc\0\u0706\0\u0740\0\72\0\u077a\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\u0910\0\u094a\0\u0984"+
    "\0\u09be\0\u09f8\0\u02b8\0\u0a32\0\164\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\164\0\u0d98\0\u0dd2\0\u0e0c\0\164"+
    "\0\u0e46\0\164\0\164\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\72\0\u1172\0\72\0\72\0\164\0\u11ac\0\u11e6\0\u1220"+
    "\0\164\0\164\0\u125a\0\u1294\0\164\0\164\0\u12ce\0\u1308"+
    "\0\u1342\0\164\0\u137c\0\u13b6\0\u13f0\0\u142a\0\164\0\164"+
    "\0\164\0\164\0\164\0\u1464\0\164\0\u149e\0\164\0\u14d8"+
    "\0\164\0\164\0\164\0\u1512\0\164\0\164\0\u154c\0\u1586"+
    "\0\164\0\164\0\u15c0\0\164\0\164\0\164\0\164\0\164"+
    "\0\164\0\u15fa\0\u1634\0\u166e\0\164\0\164\0\72\0\u16a8"+
    "\0\164\0\u16e2\0\u171c\0\164\0\u1756\0\u1790\0\u17ca\0\164"+
    "\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\72\0\u1926\0\u1960"+
    "\0\u199a\0\u19d4\0\164\0\164\0\164\0\164\0\u1a0e\0\u1a48"+
    "\0\164\0\164\0\u1a82\0\164\0\u1abc\0\u1af6\0\u1b30\0\u1b6a"+
    "\0\u1ba4\0\u1bde\0\u1c18\0\164\0\u1c52\0\u1c8c\0\u1cc6\0\164"+
    "\0\u1d00\0\u1d3a\0\164\0\u1d74\0\u1dae\0\u1de8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\3\1\7\1\3"+
    "\1\10\1\11\1\12\1\4\1\13\1\4\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\3\1\25\1\26\1\27\1\30\1\3\1\31\1\3"+
    "\1\32\1\33\1\3\1\34\1\35\4\3\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\3\1\44\5\3\1\45"+
    "\1\16\1\2\73\0\3\3\1\0\13\3\1\0\30\3"+
    "\5\0\11\3\5\0\1\4\1\46\1\0\1\47\1\4"+
    "\2\46\2\47\1\4\1\0\1\4\1\47\2\0\1\47"+
    "\7\0\2\47\3\0\1\46\2\47\17\0\1\47\1\0"+
    "\2\47\7\0\3\3\1\50\13\3\1\0\30\3\5\0"+
    "\11\3\5\0\1\51\3\0\1\52\4\0\1\52\1\0"+
    "\1\52\56\0\1\4\1\46\1\0\1\47\1\4\1\53"+
    "\1\46\2\47\1\4\1\0\1\4\1\47\2\0\1\47"+
    "\7\0\2\47\3\0\1\46\2\47\17\0\1\47\1\0"+
    "\2\47\7\0\3\3\1\0\13\3\1\0\1\3\1\54"+
    "\2\3\1\55\12\3\1\56\10\3\5\0\11\3\4\0"+
    "\3\3\1\57\13\3\1\0\30\3\5\0\11\3\4\0"+
    "\3\3\1\57\13\3\1\0\20\3\1\60\7\3\5\0"+
    "\11\3\4\0\3\3\1\61\13\3\1\0\30\3\5\0"+
    "\11\3\4\0\3\3\1\62\13\3\1\0\30\3\5\0"+
    "\11\3\5\0\1\63\3\0\1\63\4\0\1\63\1\0"+
    "\1\63\74\0\1\16\47\0\1\16\2\0\3\3\1\0"+
    "\13\3\1\0\1\3\1\64\26\3\5\0\11\3\4\0"+
    "\3\3\1\61\13\3\1\0\2\3\1\65\25\3\5\0"+
    "\11\3\4\0\3\3\1\0\13\3\1\0\1\3\1\66"+
    "\14\3\1\67\11\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\1\3\1\70\14\3\1\71\11\3\5\0"+
    "\11\3\4\0\3\3\1\0\13\3\1\0\1\3\1\72"+
    "\12\3\1\73\13\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\1\3\1\74\5\3\1\75\4\3\1\76"+
    "\13\3\5\0\11\3\4\0\3\3\1\62\13\3\1\0"+
    "\16\3\1\77\3\3\1\100\5\3\5\0\11\3\4\0"+
    "\3\3\1\0\13\3\1\0\10\3\1\101\12\3\1\102"+
    "\4\3\5\0\11\3\4\0\3\3\1\0\13\3\1\0"+
    "\16\3\1\103\11\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\4\3\1\104\1\3\1\105\5\3\1\106"+
    "\1\3\1\107\1\110\3\3\1\111\1\112\1\3\1\113"+
    "\1\3\5\0\11\3\4\0\3\3\1\50\13\3\1\0"+
    "\4\3\1\114\23\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\4\3\1\115\1\3\1\116\2\3\1\117"+
    "\16\3\5\0\11\3\4\0\3\3\1\0\13\3\1\0"+
    "\11\3\1\120\1\121\1\3\1\122\1\123\12\3\5\0"+
    "\11\3\4\0\3\3\1\0\13\3\1\0\23\3\1\124"+
    "\4\3\5\0\11\3\4\0\3\3\1\0\13\3\1\0"+
    "\1\3\1\125\26\3\5\0\11\3\74\0\1\126\1\0"+
    "\3\3\1\0\13\3\1\0\30\3\5\0\1\3\1\127"+
    "\7\3\4\0\3\3\1\0\13\3\1\0\30\3\5\0"+
    "\4\3\1\130\4\3\3\0\70\45\1\131\1\45\2\0"+
    "\1\47\1\46\1\0\2\47\2\46\3\47\1\0\2\47"+
    "\2\0\1\47\7\0\2\47\3\0\1\46\2\47\17\0"+
    "\1\47\1\0\2\47\10\0\1\132\2\0\2\132\2\0"+
    "\3\132\1\0\2\132\2\0\1\132\7\0\2\132\4\0"+
    "\2\132\17\0\1\132\1\0\2\132\10\0\1\51\1\0"+
    "\1\133\1\0\1\51\4\0\1\51\1\0\1\51\56\0"+
    "\1\51\1\0\1\134\1\0\1\52\4\0\1\52\1\0"+
    "\1\52\56\0\1\53\2\0\2\53\2\0\3\53\1\0"+
    "\2\53\2\0\1\53\7\0\2\53\4\0\2\53\17\0"+
    "\1\53\1\0\2\53\7\0\3\3\1\0\13\3\1\0"+
    "\2\3\1\135\25\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\11\3\1\136\16\3\5\0\11\3\4\0"+
    "\3\3\1\0\13\3\1\0\15\3\1\137\12\3\5\0"+
    "\11\3\11\0\1\140\4\0\1\140\57\0\3\3\1\0"+
    "\13\3\1\0\1\141\1\3\1\142\25\3\5\0\11\3"+
    "\11\0\1\143\4\0\1\143\1\0\1\143\56\0\1\51"+
    "\3\0\1\51\4\0\1\51\1\0\1\51\55\0\3\3"+
    "\1\0\13\3\1\0\2\3\1\144\25\3\5\0\11\3"+
    "\4\0\3\3\1\0\13\3\1\0\2\3\1\145\1\3"+
    "\1\146\23\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\12\3\1\147\15\3\5\0\11\3\4\0\3\3"+
    "\1\0\13\3\1\0\1\3\1\150\6\3\1\151\17\3"+
    "\5\0\11\3\4\0\3\3\1\0\13\3\1\0\11\3"+
    "\1\152\16\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\5\3\1\153\22\3\5\0\11\3\4\0\3\3"+
    "\1\0\13\3\1\0\20\3\1\154\7\3\5\0\11\3"+
    "\4\0\3\3\1\0\13\3\1\0\21\3\1\155\6\3"+
    "\5\0\11\3\4\0\3\3\1\0\13\3\1\0\3\3"+
    "\1\156\24\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\4\3\1\157\23\3\5\0\11\3\4\0\3\3"+
    "\1\0\13\3\1\0\17\3\1\160\10\3\5\0\11\3"+
    "\4\0\3\3\1\0\13\3\1\0\21\3\1\161\6\3"+
    "\5\0\11\3\4\0\3\3\1\0\13\3\1\0\10\3"+
    "\1\162\17\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\10\3\1\163\17\3\5\0\11\3\4\0\3\3"+
    "\1\0\13\3\1\0\20\3\1\164\7\3\5\0\11\3"+
    "\4\0\3\3\1\0\13\3\1\0\5\3\1\165\22\3"+
    "\5\0\11\3\4\0\3\3\1\0\13\3\1\0\6\3"+
    "\1\166\21\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\27\3\1\167\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\4\3\1\170\11\3\1\171\1\172\4\3"+
    "\1\173\1\3\1\174\1\3\5\0\11\3\4\0\3\3"+
    "\1\0\13\3\1\0\12\3\1\175\15\3\5\0\11\3"+
    "\4\0\3\3\1\0\13\3\1\0\22\3\1\176\5\3"+
    "\5\0\11\3\4\0\3\3\1\0\13\3\1\0\5\3"+
    "\1\177\22\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\4\3\1\200\23\3\5\0\11\3\4\0\3\3"+
    "\1\0\13\3\1\0\2\3\1\201\1\3\1\202\23\3"+
    "\5\0\11\3\4\0\3\3\1\0\13\3\1\0\1\3"+
    "\1\203\20\3\1\204\5\3\5\0\11\3\4\0\3\3"+
    "\1\0\5\3\1\205\5\3\1\0\30\3\5\0\11\3"+
    "\4\0\3\3\1\0\13\3\1\0\2\3\1\206\1\3"+
    "\1\202\23\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\17\3\1\207\10\3\5\0\11\3\4\0\3\3"+
    "\1\0\13\3\1\0\5\3\1\210\4\3\1\211\15\3"+
    "\5\0\11\3\5\0\1\212\3\0\1\212\4\0\1\212"+
    "\1\0\1\212\55\0\3\3\1\0\7\3\1\213\3\3"+
    "\1\0\30\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\30\3\5\0\5\3\1\214\3\3\5\0\1\132"+
    "\1\0\1\46\2\132\2\0\3\132\1\0\2\132\2\0"+
    "\1\132\7\0\2\132\4\0\2\132\17\0\1\132\1\0"+
    "\2\132\7\0\3\3\1\0\13\3\1\0\12\3\1\215"+
    "\15\3\5\0\11\3\4\0\3\3\1\0\13\3\1\0"+
    "\26\3\1\216\1\3\5\0\11\3\7\0\1\217\1\0"+
    "\1\140\4\0\1\140\62\0\1\134\1\0\1\143\4\0"+
    "\1\143\1\0\1\143\55\0\3\3\1\0\13\3\1\0"+
    "\3\3\1\220\24\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\1\221\27\3\5\0\11\3\4\0\3\3"+
    "\1\0\13\3\1\0\5\3\1\222\22\3\5\0\11\3"+
    "\4\0\3\3\1\0\13\3\1\0\20\3\1\223\7\3"+
    "\5\0\11\3\4\0\3\3\1\0\13\3\1\0\1\224"+
    "\27\3\5\0\11\3\4\0\3\3\1\0\13\3\1\0"+
    "\15\3\1\225\12\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\20\3\1\226\7\3\5\0\11\3\4\0"+
    "\3\3\1\0\13\3\1\0\10\3\1\227\17\3\5\0"+
    "\11\3\4\0\3\3\1\0\13\3\1\0\12\3\1\230"+
    "\15\3\5\0\11\3\4\0\3\3\1\0\13\3\1\0"+
    "\5\3\1\231\22\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\16\3\1\113\11\3\5\0\11\3\4\0"+
    "\3\3\1\0\13\3\1\0\16\3\1\104\11\3\5\0"+
    "\11\3\4\0\3\3\1\0\13\3\1\0\20\3\1\232"+
    "\7\3\5\0\11\3\4\0\3\3\1\0\13\3\1\0"+
    "\4\3\1\233\12\3\1\234\10\3\5\0\11\3\4\0"+
    "\3\3\1\0\13\3\1\0\20\3\1\235\7\3\5\0"+
    "\11\3\5\0\1\212\3\0\1\212\4\0\1\212\1\0"+
    "\1\212\34\0\1\236\20\0\3\3\1\0\4\3\1\237"+
    "\6\3\1\0\30\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\30\3\5\0\6\3\1\240\2\3\4\0"+
    "\3\3\1\0\13\3\1\0\4\3\1\241\23\3\5\0"+
    "\11\3\4\0\3\3\1\0\13\3\1\0\3\3\1\242"+
    "\24\3\5\0\11\3\4\0\3\3\1\0\5\3\1\243"+
    "\5\3\1\0\30\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\1\244\27\3\5\0\11\3\4\0\3\3"+
    "\1\0\5\3\1\245\5\3\1\0\25\3\1\246\2\3"+
    "\5\0\11\3\4\0\3\3\1\0\13\3\1\0\11\3"+
    "\1\247\16\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\3\3\1\250\24\3\5\0\11\3\4\0\3\3"+
    "\1\0\5\3\1\251\5\3\1\0\30\3\5\0\11\3"+
    "\4\0\3\3\1\0\13\3\1\0\1\252\27\3\5\0"+
    "\11\3\4\0\3\3\1\0\13\3\1\0\3\3\1\253"+
    "\24\3\5\0\11\3\4\0\3\3\1\0\5\3\1\254"+
    "\5\3\1\0\30\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\30\3\5\0\2\3\1\255\6\3\4\0"+
    "\3\3\1\0\13\3\1\0\30\3\5\0\7\3\1\256"+
    "\1\3\4\0\3\3\1\0\13\3\1\0\1\3\1\257"+
    "\26\3\5\0\11\3\4\0\3\3\1\0\13\3\1\0"+
    "\20\3\1\260\7\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\12\3\1\261\15\3\5\0\11\3\4\0"+
    "\3\3\1\0\13\3\1\0\15\3\1\262\12\3\5\0"+
    "\11\3\4\0\3\3\1\0\13\3\1\0\20\3\1\263"+
    "\7\3\5\0\11\3\4\0\3\3\1\0\13\3\1\0"+
    "\30\3\5\0\1\3\1\264\7\3\4\0\3\3\1\0"+
    "\7\3\1\265\3\3\1\0\30\3\5\0\11\3\4\0"+
    "\3\3\1\0\13\3\1\0\1\3\1\266\26\3\5\0"+
    "\11\3\4\0\3\3\1\0\13\3\1\0\12\3\1\267"+
    "\15\3\5\0\11\3\4\0\3\3\1\0\13\3\1\0"+
    "\11\3\1\270\16\3\5\0\11\3\4\0\3\3\1\0"+
    "\13\3\1\0\16\3\1\271\11\3\5\0\11\3\4\0"+
    "\3\3\1\0\13\3\1\0\14\3\1\272\13\3\5\0"+
    "\11\3\4\0\3\3\1\0\13\3\1\0\30\3\5\0"+
    "\10\3\1\273\4\0\3\3\1\0\13\3\1\0\5\3"+
    "\1\270\22\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\11\3\1\274\16\3\5\0\11\3\4\0\3\3"+
    "\1\0\13\3\1\0\2\3\1\275\25\3\5\0\11\3"+
    "\4\0\3\3\1\0\13\3\1\0\6\3\1\270\21\3"+
    "\5\0\11\3\4\0\3\3\1\0\13\3\1\0\2\3"+
    "\1\276\25\3\5\0\11\3\4\0\3\3\1\0\13\3"+
    "\1\0\16\3\1\270\11\3\5\0\11\3\4\0\3\3"+
    "\1\0\13\3\1\0\12\3\1\270\15\3\5\0\11\3"+
    "\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7714];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\4\11\3\1\1\11\4\0\4\1"+
    "\1\0\1\1\2\0\43\1\1\0\2\1\1\11\1\0"+
    "\2\11\3\1\1\0\2\1\1\0\46\1\1\0\4\1"+
    "\1\11\16\1\1\11\40\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    } 
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }   
;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 56: 
          { return new Symbol(sym.PUSH, yychar, yyline, yytext());
          }
        case 69: break;
        case 7: 
          { return new Symbol(sym.Llave_a, yychar, yyline, yytext());
          }
        case 70: break;
        case 33: 
          { return new Symbol(sym.AND, yychar, yyline, yytext());
          }
        case 71: break;
        case 34: 
          { return new Symbol(sym.JMP, yychar, yyline, yytext());
          }
        case 72: break;
        case 31: 
          { return new Symbol(sym.DIV, yychar, yyline, yytext());
          }
        case 73: break;
        case 19: 
          { return new Symbol(sym.NumeroOctal, yychar, yyline, yytext());
          }
        case 74: break;
        case 47: 
          { return new Symbol(sym.INC, yychar, yyline, yytext());
          }
        case 75: break;
        case 28: 
          { return new Symbol(sym.MOV, yychar, yyline, yytext());
          }
        case 76: break;
        case 68: 
          { return new Symbol(sym.Section, yychar, yyline, yytext());
          }
        case 77: break;
        case 12: 
          { return new Symbol(sym.NumeroDecimal, yychar, yyline, yytext());
          }
        case 78: break;
        case 26: 
          { return new Symbol(sym.LEA, yychar, yyline, yytext());
          }
        case 79: break;
        case 59: 
          { return new Symbol(sym.LODSB, yychar, yyline, yytext());
          }
        case 80: break;
        case 4: 
          { /*Ignorar*/
          }
        case 81: break;
        case 65: 
          { return new Symbol(sym.STOSB, yychar, yyline, yytext());
          }
        case 82: break;
        case 15: 
          { return new Symbol(sym.JE, yychar, yyline, yytext());
          }
        case 83: break;
        case 48: 
          { return new Symbol(sym.NOP, yychar, yyline, yytext());
          }
        case 84: break;
        case 37: 
          { return new Symbol(sym.JNC, yychar, yyline, yytext());
          }
        case 85: break;
        case 52: 
          { return new Symbol(sym.NumeroBinario, yychar, yyline, yytext());
          }
        case 86: break;
        case 44: 
          { return new Symbol(sym.STI, yychar, yyline, yytext());
          }
        case 87: break;
        case 54: 
          { return new Symbol(sym.LOOP, yychar, yyline, yytext());
          }
        case 88: break;
        case 51: 
          { return new Symbol(sym.XCHG, yychar, yyline, yytext());
          }
        case 89: break;
        case 5: 
          { return new Symbol(sym.Parentesis_a, yychar, yyline, yytext());
          }
        case 90: break;
        case 17: 
          { return new Symbol(sym.JZ, yychar, yyline, yytext());
          }
        case 91: break;
        case 13: 
          { return new Symbol(sym.OR, yychar, yyline, yytext());
          }
        case 92: break;
        case 32: 
          { return new Symbol(sym.ADD, yychar, yyline, yytext());
          }
        case 93: break;
        case 27: 
          { return new Symbol(sym.POP, yychar, yyline, yytext());
          }
        case 94: break;
        case 20: 
          { return new Symbol(sym.XOR, yychar, yyline, yytext());
          }
        case 95: break;
        case 8: 
          { return new Symbol(sym.Llave_c, yychar, yyline, yytext());
          }
        case 96: break;
        case 45: 
          { return new Symbol(sym.SUB, yychar, yyline, yytext());
          }
        case 97: break;
        case 41: 
          { return new Symbol(sym.CMP, yychar, yyline, yytext());
          }
        case 98: break;
        case 25: 
          { return new Symbol(sym.RET, yychar, yyline, yytext());
          }
        case 99: break;
        case 55: 
          { return new Symbol(sym.POPF, yychar, yyline, yytext());
          }
        case 100: break;
        case 36: 
          { return new Symbol(sym.JNE, yychar, yyline, yytext());
          }
        case 101: break;
        case 18: 
          { return new Symbol(sym.JG, yychar, yyline, yytext());
          }
        case 102: break;
        case 66: 
          { return new Symbol(sym.Global, yychar, yyline, yytext());
          }
        case 103: break;
        case 29: 
          { return new Symbol(sym.MUL, yychar, yyline, yytext());
          }
        case 104: break;
        case 6: 
          { return new Symbol(sym.Parentesis_c, yychar, yyline, yytext());
          }
        case 105: break;
        case 61: 
          { return new Symbol(sym.MOVSB, yychar, yyline, yytext());
          }
        case 106: break;
        case 38: 
          { return new Symbol(sym.JNZ, yychar, yyline, yytext());
          }
        case 107: break;
        case 11: 
          { return new Symbol(sym.NumeroHexadecimal, yychar, yyline, yytext());
          }
        case 108: break;
        case 53: 
          { return new Symbol(sym.RETF, yychar, yyline, yytext());
          }
        case 109: break;
        case 64: 
          { return new Symbol(sym.CALLF, yychar, yyline, yytext());
          }
        case 110: break;
        case 39: 
          { return new Symbol(sym.HLT, yychar, yyline, yytext());
          }
        case 111: break;
        case 63: 
          { return new Symbol(sym.CMPSB, yychar, yyline, yytext());
          }
        case 112: break;
        case 60: 
          { return new Symbol(sym.PUSHF, yychar, yyline, yytext());
          }
        case 113: break;
        case 42: 
          { return new Symbol(sym.SAR, yychar, yyline, yytext());
          }
        case 114: break;
        case 35: 
          { return new Symbol(sym.JEQ, yychar, yyline, yytext());
          }
        case 115: break;
        case 57: 
          { return new Symbol(sym.TEST, yychar, yyline, yytext());
          }
        case 116: break;
        case 50: 
          { return new Symbol(sym.XLAT, yychar, yyline, yytext());
          }
        case 117: break;
        case 62: 
          { return new Symbol(sym.MOVSW, yychar, yyline, yytext());
          }
        case 118: break;
        case 30: 
          { return new Symbol(sym.DEC, yychar, yyline, yytext());
          }
        case 119: break;
        case 58: 
          { return new Symbol(sym.CALL, yychar, yyline, yytext());
          }
        case 120: break;
        case 43: 
          { return new Symbol(sym.SHL, yychar, yyline, yytext());
          }
        case 121: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 122: break;
        case 24: 
          { return new Symbol(sym.ROL, yychar, yyline, yytext());
          }
        case 123: break;
        case 46: 
          { return new Symbol(sym.SHR, yychar, yyline, yytext());
          }
        case 124: break;
        case 21: 
          { return new Symbol(sym.BSF, yychar, yyline, yytext());
          }
        case 125: break;
        case 16: 
          { return new Symbol(sym.JC, yychar, yyline, yytext());
          }
        case 126: break;
        case 49: 
          { return new Symbol(sym.NOT, yychar, yyline, yytext());
          }
        case 127: break;
        case 40: 
          { return new Symbol(sym.CLI, yychar, yyline, yytext());
          }
        case 128: break;
        case 23: 
          { return new Symbol(sym.ROR, yychar, yyline, yytext());
          }
        case 129: break;
        case 14: 
          { return new Symbol(sym.JL, yychar, yyline, yytext());
          }
        case 130: break;
        case 9: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 131: break;
        case 67: 
          { return new Symbol(sym.Etiquetas, yychar, yyline, yytext());
          }
        case 132: break;
        case 10: 
          { /*Ignorar los comentarios, incluyendo saltos de línea */
          }
        case 133: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 134: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 135: break;
        case 22: 
          { return new Symbol(sym.BSR, yychar, yyline, yytext());
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
